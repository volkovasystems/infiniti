{"version":3,"sources":["test.bridge.js"],"names":["assert","require","path","describe","bridgeURL","resolve","__dirname","it","equal","result","deepEqual","JSON","parse"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,IAAMA,SAASC,QAAS,oBAAT,CAAf;;;;;;AAMA;AACA,IAAMC,OAAOD,QAAS,MAAT,CAAb;AACA;;;;;;;;AAQA;AACAE,SAAU,UAAV,EAAsB,YAAO;;AAE5B,KAAIC,wBAAuBF,KAAKG,OAAL,CAAcC,SAAd,EAAyB,aAAzB,CAA3B;;AAEAH,UAAU,uCAAV,EAAmD,YAAO;AACzDI,KAAI,kCAAJ,EAAwC,YAAO;AAC9C;AACH;;;;;;;;;;;;;;;AAeA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,IAAtB;AACA,GApBD;AAqBA,EAtBD;;AAwBAN,UAAU,oDAAV,EAAgE,YAAO;AACtEI,KAAI,sCAAJ,EAA4C,YAAO;AAClD;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,iBAAtB;AACA,GAhBD;AAiBA,EAlBD;;AAoBAN,UAAU,kDAAV,EAA8D,YAAO;AACpEI,KAAI,sCAAJ,EAA4C,YAAO;AAClD;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,iBAAtB;AACA,GAhBD;AAiBA,EAlBD;;AAoBAN,UAAU,mDAAV,EAA+D,YAAO;AACrEI,KAAI,0CAAJ,EAAgD,YAAO;AACtD;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,qBAAtB;AACA,GAhBD;AAiBA,EAlBD;;AAoBAN,UAAU,uDAAV,EAAmE,YAAO;AACzEI,KAAI,0CAAJ,EAAgD,YAAO;AACtD;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,qBAAtB;AACA,GAhBD;AAiBA,EAlBD;;AAoBAN,UAAU,gDAAV,EAA4D,YAAO;AAClEI,KAAI,kDAAJ,EAAwD,YAAO;AAC9D;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,6BAAtB;AACA,GAhBD;AAiBA,EAlBD;;AAoBAN,UAAU,kDAAV,EAA8D,YAAO;AACpEI,KAAI,wCAAJ,EAA8C,YAAO;AACpD;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOU,SAAP,CAAkBC,KAAKC,KAAL,CAAYH,MAAZ,CAAlB,EAAwC,CAAE,UAAF,EAAc,GAAd,CAAxC;AACA,GAhBD;AAiBA,EAlBD;;AAoBAN,UAAU,sDAAV,EAAkE,YAAO;AACxEI,KAAI,+CAAJ,EAAqD,YAAO;AAC3D;AACH;;;;;;;;;;;;;;;;AAgBA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,IAAtB;AACA,GArBD;AAsBA,EAvBD;;AAyBAN,UAAU,4CAAV,EAAwD,YAAO;AAC9DI,KAAI,kDAAJ,EAAwD,YAAO;AAC9D;AACH;;;;;;;;;;;;;;;;AAgBA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,IAAtB;AACA,GArBD;AAsBA,EAvBD;;AAyBAN,UAAU,iDAAV,EAA6D,YAAO;AACnEI,KAAI,0EAAJ,EAAgF,YAAO;AACtF;AACH;;;;;;;;;;;;;;;AAeA;;AAEGP,UAAOQ,KAAP,CAAcC,MAAd,EAAsB,IAAtB;AACA,GApBD;AAqBA,EAtBD;;AAwBA,CA9ND;AA+NA","file":"test.bridge.js","sourcesContent":["\"use strict\";\n\n/*;\n\t@test-license:\n\t\tThe MIT License (MIT)\n\t\t@mit-license\n\n\t\tCopyright (@c) 2017 Richeve Siodina Bebedor\n\t\t@email: richeve.bebedor@gmail.com\n\n\t\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\t\tof this software and associated documentation files (the \"Software\"), to deal\n\t\tin the Software without restriction, including without limitation the rights\n\t\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t\tcopies of the Software, and to permit persons to whom the Software is\n\t\tfurnished to do so, subject to the following conditions:\n\n\t\tThe above copyright notice and this permission notice shall be included in all\n\t\tcopies or substantial portions of the Software.\n\n\t\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t\tSOFTWARE.\n\t@end-test-license\n\n\t@test-configuration:\n\t\t{\n\t\t\t\"package\": \"infiniti\",\n\t\t\t\"path\": \"infiniti/test.module.js\",\n\t\t\t\"file\": \"test.module.js\",\n\t\t\t\"module\": \"test\",\n\t\t\t\"author\": \"Richeve S. Bebedor\",\n\t\t\t\"eMail\": \"richeve.bebedor@gmail.com\",\n\t\t\t\"repository\": \"https://github.com/volkovasystems/infiniti.git\"\n\t\t}\n\t@end-test-configuration\n\n\t@test-documentation:\n\n\t@end-test-documentation\n\n\t@include:\n\t\t{\n\t\t\t\"assert\": \"should/as-function\",\n\t\t\t\"infiniti\": \"infiniti\"\n\t\t}\n\t@end-include\n*/\n\nconst assert = require( \"should/as-function\" );\n\n\n\n\n\n//: @bridge:\nconst path = require( \"path\" );\n//: @end-bridge\n\n\n\n\n\n\n\n//: @bridge:\ndescribe( \"infiniti\", ( ) => {\n\n\tlet bridgeURL = `file://${ path.resolve( __dirname, \"bridge.html\" ) }`;\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) )`\", ( ) => {\n\t\tit( \"should persist date as true date\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\t\t\t\t\tlet result = infiniti( data );\n\n\t\t\t\t\treturn typeof result == \"object\" &&\n\t\t\t\t\t\t\"date\" in result == true &&\n\t\t\t\t\t\t\"offset\" in result == true &&\n\t\t\t\t\t\t\"trueDate\" in result == true;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) ).printDate( )`\", ( ) => {\n\t\tit( \"should be equal to 'August 15, 2016'\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\n\t\t\t\t\treturn infiniti( data ).printDate( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, \"August 15, 2016\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) ).getDate( )`\", ( ) => {\n\t\tit( \"should be equal to 'August 15, 2016'\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\n\t\t\t\t\treturn infiniti( data ).getDate( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, \"August 15, 2016\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) ).realDate( )`\", ( ) => {\n\t\tit( \"should be equal to '2016-08-14T16:00:00'\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\n\t\t\t\t\treturn infiniti( data ).realDate( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, \"2016-08-14T16:00:00\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) ).relativeDate( )`\", ( ) => {\n\t\tit( \"should be equal to '2016-08-15T00:00:00'\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\n\t\t\t\t\treturn infiniti( data ).relativeDate( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, \"2016-08-15T00:00:00\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) ).trueDate`\", ( ) => {\n\t\tit( \"should be equal to '0​2016​08​14​16​00​00​00480'\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\n\t\t\t\t\treturn infiniti( data ).trueDate;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, \"0​2016​08​14​16​00​00​00480\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( new Date( '8/15/2016' ) ).compact( )`\", ( ) => {\n\t\tit( \"should be equal to [ 2016081416, 480 ]\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = new Date( \"8/15/2016\" );\n\n\t\t\t\t\treturn JSON.stringify( infiniti( data ).compact( ) );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.deepEqual( JSON.parse( result ), [ 2016081416, 480 ] );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( '0​2016​08​14​16​00​00​00480' ).parse( )`\", ( ) => {\n\t\tit( \"should decompose true date to a moment object\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = \"0​2016​08​14​16​00​00​00480\";\n\n\t\t\t\t\tlet result = infiniti( data ).parse( );\n\n\t\t\t\t\treturn typeof result == \"object\" &&\n\t\t\t\t\t\t\"date\" in result == true &&\n\t\t\t\t\t\t\"offset\" in result == true &&\n\t\t\t\t\t\t\"trueDate\" in result == true;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti( [ 2016081416, 480 ] ).parse( )`\", ( ) => {\n\t\tit( \"should decompose compact date to a moment object\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst data = [ 2016081416, 480 ];\n\n\t\t\t\t\tlet result = infiniti( data ).parse( );\n\n\t\t\t\t\treturn typeof result == \"object\" &&\n\t\t\t\t\t\t\"date\" in result == true &&\n\t\t\t\t\t\t\"offset\" in result == true &&\n\t\t\t\t\t\t\"trueDate\" in result == true;\n \t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`Infiniti parse with trueDate and compact date`\", ( ) => {\n\t\tit( \"should have the same trueDate regardless of how many times it was parsed\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tconst dataA = \"0​2016​08​14​16​00​00​00480\";\n\t\t\t\t\tlet testA = infiniti( dataA ).parse( )\n\n\t\t\t\t\tconst dataB = [ 2016081416, 480 ];\n\t\t\t\t\tlet testB = infiniti( dataB ).parse( );\n\n\t\t\t\t\treturn dataA.trueDate == dataB.trueDate;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\t\t} );\n\t} );\n\n} );\n//: @end-bridge\n"]}