"use strict";

/*;
	@module-license:
		The MIT License (MIT)
		@mit-license

		Copyright (@c) 2017 Richeve Siodina Bebedor
		@email: richeve.bebedor@gmail.com

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
	@end-module-license

	@module-configuration:
		{
			"package": "infiniti",
			"path": "infiniti/infiniti.js",
			"file": "infiniti.js",
			"module": "infiniti",
			"author": "Richeve S. Bebedor",
			"contributors": [
				"John Lenon Maghanoy <johnlenonmaghanoy@gmail.com>"
			],
			"eMail": "richeve.bebedor@gmail.com",
			"repository": "https://github.com:volkovasystems/infiniti.git",
			"test": "infiniti-test.js",
			"global": true,
			"class": true,
		}
	@end-module-configuration

	@module-documentation:
		Take note that the time part is always in zero.
	@end-module-documentation

	@include:
		{
			"clazof": "clazof",
			"depher": "depher",
			"diatom": "diatom",
			"doubt": "doubt",
			"falze": "falze",
			"falzy": "falzy",
			"harden": "harden",
			"moment": "moment",
			"optfor": "optfor",
			"protype": "protype",
			"raze": "raze",
			"truly": "truly",
			"U200b": "u200b"
		}
	@end-include
*/

var clazof = require("clazof");
var depher = require("depher");
var diatom = require("diatom");
var doubt = require("doubt");
var falze = require("falze");
var falzy = require("falzy");
var harden = require("harden");
var moment = require("moment");
var optfor = require("optfor");
var protype = require("protype");
var raze = require("raze");
var truly = require("truly");
var U200b = require("u200b");

var COMPACT_FORMAT = "YYYYMMDDHH";
var DEFAULT_SEPARATOR = " | ";
var ISO8601_FORMAT = "YYYY-MM-DDTHH:00:00";
var NUMERIC_PATTERN = /\d+/;
var SIMPLE_DATE_FORMAT = "MMMM DD, YYYY";
var TRUE_DATE_PATTERN = /^\-[\d\u200b]{30}|^[\d\u200b]{31}$/;

var Infiniti = diatom("Infiniti");

harden("now", function now() {
	return Infiniti().compact();
}, Infiniti);

Infiniti.prototype.toString = function toString() {
	return this.trueDate;
};

Infiniti.prototype.valueOf = function valueOf() {
	return this.trueDate;
};

Infiniti.prototype.initialize = function initialize(date) {
	/*;
 	@meta-configuration:
 		{
 			"date:required": [
 				[ "number", "number" ],
 				"string",
 				Date
 			]
 		}
 	@end-meta-configuration
 */

	if (doubt(date, ARRAY) && protype(date[0], NUMBER) && protype(date[1], NUMBER) && date[0].toString().length == 17) {
		this.offset = date[1];

		this.date = moment.utc(date[0], COMPACT_FORMAT).minute(0).second(0).millisecond(0).utcOffset(this.offset);

		this.persist();
	} else if (protype(date, STRING) && date.length == 27 && TRUE_DATE_PATTERN.test(date)) {
		this.date = date;

		this.parse();
	} else if (protype(date, STRING) && truly(date)) {
		try {
			date = moment(date).minute(0).second(0).millisecond(0);

			if (date.isValid()) {
				this.initialize(date.toDate());
			} else {
				throw new Error("invalid date format, " + arguments[0]);
			}
		} catch (error) {
			throw new Error("error encountered while parsing date, " + error);
		}
	} else if (clazof(date, Date)) {
		this.date = moment(date).minute(0).second(0).millisecond(0);

		this.persist();
	} else {
		this.date = moment(new Date()).minute(0).second(0).millisecond(0);

		this.persist();
	}

	return this;
};

/*
	@method-documentation:
		This should be persisted on the machine where the timezone is persisted.

		It will save the true date in utc format + the machine timezone.
	@end-method-documentation
*/
Infiniti.prototype.persist = function persist() {
	if (truly(this.trueDate)) {
		return this.trueDate;
	}

	var date = this.date.toDate();

	var offset = this.offset || this.date.utcOffset();
	try {
		offset = parseInt(offset);
	} catch (error) {
		throw new Error("invalid timezone offset, " + error);
	}

	var polarity = 0;
	if (offset != 0) {
		polarity = offset / Math.abs(offset);
	}

	var trueDate = U200b([
	//: positive / negative offset
	polarity.toString().replace(NUMERIC_PATTERN, "") || "0",

	//: year
	date.getUTCFullYear(),

	//: month
	("0" + (date.getUTCMonth() + 1)).slice(-2),

	//: day
	("0" + date.getUTCDate()).slice(-2),

	//: hour
	("0" + date.getUTCHours()).slice(-2),

	//: minute
	"00",

	//: second
	"00",

	//: offset
	("000" + Math.abs(offset)).slice(-5)]).join();

	this.trueDate = trueDate;

	this.offset = offset;

	return trueDate;
};

/*;
	@method-documentation:
		Decompose true date to a moment object.
	@end-method-documentation
*/
Infiniti.prototype.parse = function parse() {
	var date = this.date;

	if (protype(this.date, STRING)) {
		date = U200b(this.date).separate();
	} else if (truly(this.trueDate)) {
		date = U200b(this.trueDate).separate();
	} else {
		throw new Error("date not specified");
	}

	try {
		var polarity = parseInt(date[0] + 1);

		this.offset = polarity * parseInt(date[8]);

		date = moment.utc().year(parseInt(date[1])).month(parseInt(date[2]) - 1).date(parseInt(date[3])).hour(parseInt(date[4])).minute(0).second(0).millisecond(0);
	} catch (error) {
		throw new Error("error parsing true date, " + error);
	}

	//: This will set the timezone of the Date object to the machine timezone.
	this.date = date;

	this.persist();

	return this;
};

/*;
	@method-documentation:
		Relative date is the date applied with UTC offset.

		This will return the date in ISO8601 format.

		`YYYY-MM-DDTHH:00:00`

		Do not use this to reference true date.
	@end-method-documentation
*/
Infiniti.prototype.relativeDate = function relativeDate() {
	if (falze(this.date)) {
		throw new Error("internal date empty");
	}

	if (falzy(this.offset)) {
		throw new Error("internal timezone offset empty");
	}

	return this.date.utc().utcOffset(this.offset).format(ISO8601_FORMAT);
};

/*;
	@method-documentation:
		Real date is the date with no UTC offset applied.

		This will return the date in ISO8601

		`YYYY-MM-DDTHH:00:00`
	@end-method-documentation
*/
Infiniti.prototype.realDate = function realDate() {
	if (falze(this.date)) {
		throw new Error("internal date empty");
	}

	return this.date.utc().format(ISO8601_FORMAT);
};

/*;
	@method-documentation:
		Returns a simple human readable representation of date.

		Date will be relative.
	@end-method-documentation
*/
Infiniti.prototype.getDate = function getDate() {
	if (falze(this.date)) {
		throw new Error("internal date empty");
	}

	if (falzy(this.offset)) {
		throw new Error("internal timezone offset empty");
	}

	return this.date.utc().utcOffset(this.offset).format(SIMPLE_DATE_FORMAT);
};

/*;
	@method-documentation:
		Returns a simple human readable representation of date.

		Date will be relative.

		Setting complete will append true date format.
	@end-method-documentation
*/
Infiniti.prototype.printDate = function printDate(separator, complete) {
	/*;
 	@meta-configuration:
 		{
 			"separator": "string",
 			"complete": "boolean"
 		}
 	@end-meta-configuration
 */

	var parameter = raze(arguments);

	separator = optfor(parameter, STRING);

	separator = separator || DEFAULT_SEPARATOR;
	if (!protype(separator, STRING)) {
		separator = DEFAULT_SEPARATOR;
	}

	complete = depher(parameter, BOOLEAN, false);

	if (complete) {
		return [this.getDate(), this.trueDate].join(separator);
	} else {
		return this.getDate();
	}
};

/*;
	@method-documentation:
		Returns a numerical representation of true date in UTC.

		Time part is excluded except the hour.
	@end-method-documentation
*/
Infiniti.prototype.compact = function compact() {
	return [this.date.utc().format(COMPACT_FORMAT), this.offset].map(function onEachToken(token) {
		return parseInt(token.toString());
	});
};

module.exports = Infiniti;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZmluaXRpLmpzIl0sIm5hbWVzIjpbImNsYXpvZiIsInJlcXVpcmUiLCJkZXBoZXIiLCJkaWF0b20iLCJkb3VidCIsImZhbHplIiwiZmFsenkiLCJoYXJkZW4iLCJtb21lbnQiLCJvcHRmb3IiLCJwcm90eXBlIiwicmF6ZSIsInRydWx5IiwiVTIwMGIiLCJDT01QQUNUX0ZPUk1BVCIsIkRFRkFVTFRfU0VQQVJBVE9SIiwiSVNPODYwMV9GT1JNQVQiLCJOVU1FUklDX1BBVFRFUk4iLCJTSU1QTEVfREFURV9GT1JNQVQiLCJUUlVFX0RBVEVfUEFUVEVSTiIsIkluZmluaXRpIiwibm93IiwiY29tcGFjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwidHJ1ZURhdGUiLCJ2YWx1ZU9mIiwiaW5pdGlhbGl6ZSIsImRhdGUiLCJBUlJBWSIsIk5VTUJFUiIsImxlbmd0aCIsIm9mZnNldCIsInV0YyIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwidXRjT2Zmc2V0IiwicGVyc2lzdCIsIlNUUklORyIsInRlc3QiLCJwYXJzZSIsImlzVmFsaWQiLCJ0b0RhdGUiLCJFcnJvciIsImFyZ3VtZW50cyIsImVycm9yIiwiRGF0ZSIsInBhcnNlSW50IiwicG9sYXJpdHkiLCJNYXRoIiwiYWJzIiwicmVwbGFjZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJzbGljZSIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImpvaW4iLCJzZXBhcmF0ZSIsInllYXIiLCJtb250aCIsImhvdXIiLCJyZWxhdGl2ZURhdGUiLCJmb3JtYXQiLCJyZWFsRGF0ZSIsImdldERhdGUiLCJwcmludERhdGUiLCJzZXBhcmF0b3IiLCJjb21wbGV0ZSIsInBhcmFtZXRlciIsIkJPT0xFQU4iLCJtYXAiLCJvbkVhY2hUb2tlbiIsInRva2VuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Q0FBWjs7QUFFQTZCLGFBQVlBLGFBQWFyRCxpQkFBekI7QUFDQSxLQUFJLENBQUNMLFFBQVMwRCxTQUFULEVBQW9CN0IsTUFBcEIsQ0FBTCxFQUFtQztBQUNsQzZCLGNBQVlyRCxpQkFBWjtBQUNBOztBQUVEc0QsWUFBV25FLE9BQVFvRSxTQUFSLEVBQW1CQyxPQUFuQixFQUE0QixLQUE1QixDQUFYOztBQUVBLEtBQUlGLFFBQUosRUFBYztBQUNiLFNBQU8sQ0FBRSxLQUFLSCxPQUFMLEVBQUYsRUFBbUIsS0FBS3pDLFFBQXhCLEVBQW1DaUMsSUFBbkMsQ0FBeUNVLFNBQXpDLENBQVA7QUFFQSxFQUhELE1BR0s7QUFDSixTQUFPLEtBQUtGLE9BQUwsRUFBUDtBQUNBO0FBQ0QsQ0EzQkQ7O0FBNkJBOzs7Ozs7O0FBT0E5QyxTQUFTRyxTQUFULENBQW1CRCxPQUFuQixHQUE2QixTQUFTQSxPQUFULEdBQW1CO0FBQy9DLFFBQU8sQ0FBRSxLQUFLTSxJQUFMLENBQVVLLEdBQVYsR0FBaUIrQixNQUFqQixDQUF5QmxELGNBQXpCLENBQUYsRUFBNkMsS0FBS2tCLE1BQWxELEVBQ0x3QyxHQURLLENBQ0EsU0FBU0MsV0FBVCxDQUFzQkMsS0FBdEIsRUFBNkI7QUFBRSxTQUFPMUIsU0FBVTBCLE1BQU1sRCxRQUFOLEVBQVYsQ0FBUDtBQUF1QyxFQUR0RSxDQUFQO0FBRUEsQ0FIRDs7QUFLQW1ELE9BQU9DLE9BQVAsR0FBaUJ4RCxRQUFqQiIsImZpbGUiOiJpbmZpbml0aS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiaW5maW5pdGlcIixcblx0XHRcdFwicGF0aFwiOiBcImluZmluaXRpL2luZmluaXRpLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJpbmZpbml0aS5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJpbmZpbml0aVwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tOnZvbGtvdmFzeXN0ZW1zL2luZmluaXRpLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiaW5maW5pdGktdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZSxcblx0XHRcdFwiY2xhc3NcIjogdHJ1ZSxcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0VGFrZSBub3RlIHRoYXQgdGhlIHRpbWUgcGFydCBpcyBhbHdheXMgaW4gemVyby5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiY2xhem9mXCI6IFwiY2xhem9mXCIsXG5cdFx0XHRcImRlcGhlclwiOiBcImRlcGhlclwiLFxuXHRcdFx0XCJkaWF0b21cIjogXCJkaWF0b21cIixcblx0XHRcdFwiZG91YnRcIjogXCJkb3VidFwiLFxuXHRcdFx0XCJmYWx6ZVwiOiBcImZhbHplXCIsXG5cdFx0XHRcImZhbHp5XCI6IFwiZmFsenlcIixcblx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcIm1vbWVudFwiOiBcIm1vbWVudFwiLFxuXHRcdFx0XCJvcHRmb3JcIjogXCJvcHRmb3JcIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFwicmF6ZVwiOiBcInJhemVcIixcblx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiLFxuXHRcdFx0XCJVMjAwYlwiOiBcInUyMDBiXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxuY29uc3QgY2xhem9mID0gcmVxdWlyZSggXCJjbGF6b2ZcIiApO1xuY29uc3QgZGVwaGVyID0gcmVxdWlyZSggXCJkZXBoZXJcIiApO1xuY29uc3QgZGlhdG9tID0gcmVxdWlyZSggXCJkaWF0b21cIiApO1xuY29uc3QgZG91YnQgPSByZXF1aXJlKCBcImRvdWJ0XCIgKTtcbmNvbnN0IGZhbHplID0gcmVxdWlyZSggXCJmYWx6ZVwiICk7XG5jb25zdCBmYWx6eSA9IHJlcXVpcmUoIFwiZmFsenlcIiApO1xuY29uc3QgaGFyZGVuID0gcmVxdWlyZSggXCJoYXJkZW5cIiApO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZSggXCJtb21lbnRcIiApO1xuY29uc3Qgb3B0Zm9yID0gcmVxdWlyZSggXCJvcHRmb3JcIiApO1xuY29uc3QgcHJvdHlwZSA9IHJlcXVpcmUoIFwicHJvdHlwZVwiICk7XG5jb25zdCByYXplID0gcmVxdWlyZSggXCJyYXplXCIgKTtcbmNvbnN0IHRydWx5ID0gcmVxdWlyZSggXCJ0cnVseVwiICk7XG5jb25zdCBVMjAwYiA9IHJlcXVpcmUoIFwidTIwMGJcIiApO1xuXG5jb25zdCBDT01QQUNUX0ZPUk1BVCA9IFwiWVlZWU1NRERISFwiO1xuY29uc3QgREVGQVVMVF9TRVBBUkFUT1IgPSBcIiB8IFwiO1xuY29uc3QgSVNPODYwMV9GT1JNQVQgPSBcIllZWVktTU0tRERUSEg6MDA6MDBcIjtcbmNvbnN0IE5VTUVSSUNfUEFUVEVSTiA9IC9cXGQrLztcbmNvbnN0IFNJTVBMRV9EQVRFX0ZPUk1BVCA9IFwiTU1NTSBERCwgWVlZWVwiO1xuY29uc3QgVFJVRV9EQVRFX1BBVFRFUk4gPSAvXlxcLVtcXGRcXHUyMDBiXXszMH18XltcXGRcXHUyMDBiXXszMX0kLztcblxuY29uc3QgSW5maW5pdGkgPSBkaWF0b20oIFwiSW5maW5pdGlcIiApO1xuXG5oYXJkZW4oIFwibm93XCIsIGZ1bmN0aW9uIG5vdyggKXtcblx0cmV0dXJuIEluZmluaXRpKCApLmNvbXBhY3QoICk7XG59LCBJbmZpbml0aSApO1xuXG5JbmZpbml0aS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyggKXtcblx0cmV0dXJuIHRoaXMudHJ1ZURhdGU7XG59O1xuXG5JbmZpbml0aS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uIHZhbHVlT2YoICl7XG5cdHJldHVybiB0aGlzLnRydWVEYXRlO1xufTtcblxuSW5maW5pdGkucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiBpbml0aWFsaXplKCBkYXRlICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwiZGF0ZTpyZXF1aXJlZFwiOiBbXG5cdFx0XHRcdFx0WyBcIm51bWJlclwiLCBcIm51bWJlclwiIF0sXG5cdFx0XHRcdFx0XCJzdHJpbmdcIixcblx0XHRcdFx0XHREYXRlXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQqL1xuXG5cdGlmKCBkb3VidCggZGF0ZSwgQVJSQVkgKSAmJlxuXHRcdHByb3R5cGUoIGRhdGVbIDAgXSwgTlVNQkVSICkgJiZcblx0XHRwcm90eXBlKCBkYXRlWyAxIF0sIE5VTUJFUiApICYmXG5cdFx0ZGF0ZVsgMCBdLnRvU3RyaW5nKCApLmxlbmd0aCA9PSAxNyApXG5cdHtcblx0XHR0aGlzLm9mZnNldCA9IGRhdGVbIDEgXTtcblxuXHRcdHRoaXMuZGF0ZSA9IG1vbWVudC51dGMoIGRhdGVbIDAgXSwgQ09NUEFDVF9GT1JNQVQgKVxuXHRcdFx0Lm1pbnV0ZSggMCApXG5cdFx0XHQuc2Vjb25kKCAwIClcblx0XHRcdC5taWxsaXNlY29uZCggMCApXG5cdFx0XHQudXRjT2Zmc2V0KCB0aGlzLm9mZnNldCApO1xuXG5cdFx0dGhpcy5wZXJzaXN0KCApO1xuXG5cdH1lbHNlIGlmKCBwcm90eXBlKCBkYXRlLCBTVFJJTkcgKSAmJiBkYXRlLmxlbmd0aCA9PSAyNyAmJiBUUlVFX0RBVEVfUEFUVEVSTi50ZXN0KCBkYXRlICkgKXtcblx0XHR0aGlzLmRhdGUgPSBkYXRlO1xuXG5cdFx0dGhpcy5wYXJzZSggKTtcblxuXHR9ZWxzZSBpZiggcHJvdHlwZSggZGF0ZSwgU1RSSU5HICkgJiYgdHJ1bHkoIGRhdGUgKSApe1xuXHRcdHRyeXtcblx0XHRcdGRhdGUgPSBtb21lbnQoIGRhdGUgKVxuXHRcdFx0XHQubWludXRlKCAwIClcblx0XHRcdFx0LnNlY29uZCggMCApXG5cdFx0XHRcdC5taWxsaXNlY29uZCggMCApO1xuXG5cdFx0XHRpZiggZGF0ZS5pc1ZhbGlkKCApICl7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZSggZGF0ZS50b0RhdGUoICkgKTtcblxuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggYGludmFsaWQgZGF0ZSBmb3JtYXQsICR7IGFyZ3VtZW50c1sgMCBdIH1gICk7XG5cdFx0XHR9XG5cblx0XHR9Y2F0Y2goIGVycm9yICl7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBlcnJvciBlbmNvdW50ZXJlZCB3aGlsZSBwYXJzaW5nIGRhdGUsICR7IGVycm9yIH1gICk7XG5cdFx0fVxuXG5cdH1lbHNlIGlmKCBjbGF6b2YoIGRhdGUsIERhdGUgKSApe1xuXHRcdHRoaXMuZGF0ZSA9IG1vbWVudCggZGF0ZSApXG5cdFx0XHQubWludXRlKCAwIClcblx0XHRcdC5zZWNvbmQoIDAgKVxuXHRcdFx0Lm1pbGxpc2Vjb25kKCAwICk7XG5cblx0XHR0aGlzLnBlcnNpc3QoICk7XG5cblx0fWVsc2V7XG5cdFx0dGhpcy5kYXRlID0gbW9tZW50KCBuZXcgRGF0ZSggKSApXG5cdFx0XHQubWludXRlKCAwIClcblx0XHRcdC5zZWNvbmQoIDAgKVxuXHRcdFx0Lm1pbGxpc2Vjb25kKCAwICk7XG5cblx0XHR0aGlzLnBlcnNpc3QoICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8qXG5cdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRUaGlzIHNob3VsZCBiZSBwZXJzaXN0ZWQgb24gdGhlIG1hY2hpbmUgd2hlcmUgdGhlIHRpbWV6b25lIGlzIHBlcnNpc3RlZC5cblxuXHRcdEl0IHdpbGwgc2F2ZSB0aGUgdHJ1ZSBkYXRlIGluIHV0YyBmb3JtYXQgKyB0aGUgbWFjaGluZSB0aW1lem9uZS5cblx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuKi9cbkluZmluaXRpLnByb3RvdHlwZS5wZXJzaXN0ID0gZnVuY3Rpb24gcGVyc2lzdCggKXtcblx0aWYoIHRydWx5KCB0aGlzLnRydWVEYXRlICkgKXtcblx0XHRyZXR1cm4gdGhpcy50cnVlRGF0ZTtcblx0fVxuXG5cdGxldCBkYXRlID0gdGhpcy5kYXRlLnRvRGF0ZSggKTtcblxuXHRsZXQgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgfHwgdGhpcy5kYXRlLnV0Y09mZnNldCggKTtcblx0dHJ5e1xuXHRcdG9mZnNldCA9IHBhcnNlSW50KCBvZmZzZXQgKTtcblxuXHR9Y2F0Y2goIGVycm9yICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBgaW52YWxpZCB0aW1lem9uZSBvZmZzZXQsICR7IGVycm9yIH1gICk7XG5cdH1cblxuXHRsZXQgcG9sYXJpdHkgPSAwO1xuXHRpZiggb2Zmc2V0ICE9IDAgKXtcblx0XHRwb2xhcml0eSA9IG9mZnNldCAvIE1hdGguYWJzKCBvZmZzZXQgKTtcblx0fVxuXG5cdGxldCB0cnVlRGF0ZSA9IFUyMDBiKCBbXG5cdFx0Ly86IHBvc2l0aXZlIC8gbmVnYXRpdmUgb2Zmc2V0XG5cdFx0cG9sYXJpdHkudG9TdHJpbmcoICkucmVwbGFjZSggTlVNRVJJQ19QQVRURVJOLCBcIlwiICkgfHwgXCIwXCIsXG5cblx0XHQvLzogeWVhclxuXHRcdGRhdGUuZ2V0VVRDRnVsbFllYXIoICksXG5cblx0XHQvLzogbW9udGhcblx0XHQoIFwiMFwiICsgKCBkYXRlLmdldFVUQ01vbnRoKCApICsgMSApICkuc2xpY2UoIC0yICksXG5cblx0XHQvLzogZGF5XG5cdFx0KCBcIjBcIiArICggZGF0ZS5nZXRVVENEYXRlKCApICkgKS5zbGljZSggLTIgKSxcblxuXHRcdC8vOiBob3VyXG5cdFx0KCBcIjBcIiArICggZGF0ZS5nZXRVVENIb3VycyggKSApICkuc2xpY2UoIC0yICksXG5cblx0XHQvLzogbWludXRlXG5cdFx0XCIwMFwiLFxuXG5cdFx0Ly86IHNlY29uZFxuXHRcdFwiMDBcIixcblxuXHRcdC8vOiBvZmZzZXRcblx0XHQoIFwiMDAwXCIgKyBNYXRoLmFicyggb2Zmc2V0ICkgKS5zbGljZSggLTUgKVxuXHRdICkuam9pbiggKTtcblxuXHR0aGlzLnRydWVEYXRlID0gdHJ1ZURhdGU7XG5cblx0dGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cblx0cmV0dXJuIHRydWVEYXRlO1xufTtcblxuLyo7XG5cdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHREZWNvbXBvc2UgdHJ1ZSBkYXRlIHRvIGEgbW9tZW50IG9iamVjdC5cblx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuKi9cbkluZmluaXRpLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKCApe1xuXHRsZXQgZGF0ZSA9IHRoaXMuZGF0ZTtcblxuXHRpZiggcHJvdHlwZSggdGhpcy5kYXRlLCBTVFJJTkcgKSApe1xuXHRcdGRhdGUgPSBVMjAwYiggdGhpcy5kYXRlICkuc2VwYXJhdGUoICk7XG5cblx0fWVsc2UgaWYoIHRydWx5KCB0aGlzLnRydWVEYXRlICkgKXtcblx0XHRkYXRlID0gVTIwMGIoIHRoaXMudHJ1ZURhdGUgKS5zZXBhcmF0ZSggKTtcblxuXHR9ZWxzZXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiZGF0ZSBub3Qgc3BlY2lmaWVkXCIgKTtcblx0fVxuXG5cdHRyeXtcblx0XHRsZXQgcG9sYXJpdHkgPSBwYXJzZUludCggZGF0ZVsgMCBdICsgMSApO1xuXG5cdFx0dGhpcy5vZmZzZXQgPSBwb2xhcml0eSAqIHBhcnNlSW50KCBkYXRlWyA4IF0gKTtcblxuXHRcdGRhdGUgPSBtb21lbnQudXRjKCApXG5cdFx0XHQueWVhciggcGFyc2VJbnQoIGRhdGVbIDEgXSApIClcblx0XHRcdC5tb250aCggcGFyc2VJbnQoIGRhdGVbIDIgXSApIC0gMSApXG5cdFx0XHQuZGF0ZSggcGFyc2VJbnQoIGRhdGVbIDMgXSApIClcblx0XHRcdC5ob3VyKCBwYXJzZUludCggZGF0ZVsgNCBdICkgKVxuXHRcdFx0Lm1pbnV0ZSggMCApXG5cdFx0XHQuc2Vjb25kKCAwIClcblx0XHRcdC5taWxsaXNlY29uZCggMCApO1xuXG5cdH1jYXRjaCggZXJyb3IgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIGBlcnJvciBwYXJzaW5nIHRydWUgZGF0ZSwgJHsgZXJyb3IgfWAgKTtcblx0fVxuXG5cdC8vOiBUaGlzIHdpbGwgc2V0IHRoZSB0aW1lem9uZSBvZiB0aGUgRGF0ZSBvYmplY3QgdG8gdGhlIG1hY2hpbmUgdGltZXpvbmUuXG5cdHRoaXMuZGF0ZSA9IGRhdGU7XG5cblx0dGhpcy5wZXJzaXN0KCApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxuLyo7XG5cdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRSZWxhdGl2ZSBkYXRlIGlzIHRoZSBkYXRlIGFwcGxpZWQgd2l0aCBVVEMgb2Zmc2V0LlxuXG5cdFx0VGhpcyB3aWxsIHJldHVybiB0aGUgZGF0ZSBpbiBJU084NjAxIGZvcm1hdC5cblxuXHRcdGBZWVlZLU1NLUREVEhIOjAwOjAwYFxuXG5cdFx0RG8gbm90IHVzZSB0aGlzIHRvIHJlZmVyZW5jZSB0cnVlIGRhdGUuXG5cdEBlbmQtbWV0aG9kLWRvY3VtZW50YXRpb25cbiovXG5JbmZpbml0aS5wcm90b3R5cGUucmVsYXRpdmVEYXRlID0gZnVuY3Rpb24gcmVsYXRpdmVEYXRlKCApe1xuXHRpZiggZmFsemUoIHRoaXMuZGF0ZSApICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBcImludGVybmFsIGRhdGUgZW1wdHlcIiApO1xuXHR9XG5cblx0aWYoIGZhbHp5KCB0aGlzLm9mZnNldCApICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBcImludGVybmFsIHRpbWV6b25lIG9mZnNldCBlbXB0eVwiICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcy5kYXRlLnV0YyggKS51dGNPZmZzZXQoIHRoaXMub2Zmc2V0ICkuZm9ybWF0KCBJU084NjAxX0ZPUk1BVCApO1xufTtcblxuLyo7XG5cdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRSZWFsIGRhdGUgaXMgdGhlIGRhdGUgd2l0aCBubyBVVEMgb2Zmc2V0IGFwcGxpZWQuXG5cblx0XHRUaGlzIHdpbGwgcmV0dXJuIHRoZSBkYXRlIGluIElTTzg2MDFcblxuXHRcdGBZWVlZLU1NLUREVEhIOjAwOjAwYFxuXHRAZW5kLW1ldGhvZC1kb2N1bWVudGF0aW9uXG4qL1xuSW5maW5pdGkucHJvdG90eXBlLnJlYWxEYXRlID0gZnVuY3Rpb24gcmVhbERhdGUoICl7XG5cdGlmKCBmYWx6ZSggdGhpcy5kYXRlICkgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiaW50ZXJuYWwgZGF0ZSBlbXB0eVwiICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcy5kYXRlLnV0YyggKS5mb3JtYXQoIElTTzg2MDFfRk9STUFUICk7XG59O1xuXG4vKjtcblx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFJldHVybnMgYSBzaW1wbGUgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgZGF0ZS5cblxuXHRcdERhdGUgd2lsbCBiZSByZWxhdGl2ZS5cblx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuKi9cbkluZmluaXRpLnByb3RvdHlwZS5nZXREYXRlID0gZnVuY3Rpb24gZ2V0RGF0ZSggKXtcblx0aWYoIGZhbHplKCB0aGlzLmRhdGUgKSApe1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnRlcm5hbCBkYXRlIGVtcHR5XCIgKTtcblx0fVxuXG5cdGlmKCBmYWx6eSggdGhpcy5vZmZzZXQgKSApe1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnRlcm5hbCB0aW1lem9uZSBvZmZzZXQgZW1wdHlcIiApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXMuZGF0ZS51dGMoICkudXRjT2Zmc2V0KCB0aGlzLm9mZnNldCApLmZvcm1hdCggU0lNUExFX0RBVEVfRk9STUFUICk7XG59O1xuXG4vKjtcblx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFJldHVybnMgYSBzaW1wbGUgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgZGF0ZS5cblxuXHRcdERhdGUgd2lsbCBiZSByZWxhdGl2ZS5cblxuXHRcdFNldHRpbmcgY29tcGxldGUgd2lsbCBhcHBlbmQgdHJ1ZSBkYXRlIGZvcm1hdC5cblx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuKi9cbkluZmluaXRpLnByb3RvdHlwZS5wcmludERhdGUgPSBmdW5jdGlvbiBwcmludERhdGUoIHNlcGFyYXRvciwgY29tcGxldGUgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJzZXBhcmF0b3JcIjogXCJzdHJpbmdcIixcblx0XHRcdFx0XCJjb21wbGV0ZVwiOiBcImJvb2xlYW5cIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0bGV0IHBhcmFtZXRlciA9IHJhemUoIGFyZ3VtZW50cyApO1xuXG5cdHNlcGFyYXRvciA9IG9wdGZvciggcGFyYW1ldGVyLCBTVFJJTkcgKTtcblxuXHRzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgREVGQVVMVF9TRVBBUkFUT1I7XG5cdGlmKCAhcHJvdHlwZSggc2VwYXJhdG9yLCBTVFJJTkcgKSApe1xuXHRcdHNlcGFyYXRvciA9IERFRkFVTFRfU0VQQVJBVE9SO1xuXHR9XG5cblx0Y29tcGxldGUgPSBkZXBoZXIoIHBhcmFtZXRlciwgQk9PTEVBTiwgZmFsc2UgKTtcblxuXHRpZiggY29tcGxldGUgKXtcblx0XHRyZXR1cm4gWyB0aGlzLmdldERhdGUoICksIHRoaXMudHJ1ZURhdGUgXS5qb2luKCBzZXBhcmF0b3IgKTtcblxuXHR9ZWxzZXtcblx0XHRyZXR1cm4gdGhpcy5nZXREYXRlKCApO1xuXHR9XG59O1xuXG4vKjtcblx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFJldHVybnMgYSBudW1lcmljYWwgcmVwcmVzZW50YXRpb24gb2YgdHJ1ZSBkYXRlIGluIFVUQy5cblxuXHRcdFRpbWUgcGFydCBpcyBleGNsdWRlZCBleGNlcHQgdGhlIGhvdXIuXG5cdEBlbmQtbWV0aG9kLWRvY3VtZW50YXRpb25cbiovXG5JbmZpbml0aS5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QoICl7XG5cdHJldHVybiBbIHRoaXMuZGF0ZS51dGMoICkuZm9ybWF0KCBDT01QQUNUX0ZPUk1BVCApLCB0aGlzLm9mZnNldCBdXG5cdFx0Lm1hcCggZnVuY3Rpb24gb25FYWNoVG9rZW4oIHRva2VuICl7IHJldHVybiBwYXJzZUludCggdG9rZW4udG9TdHJpbmcoICkgKTsgfSApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZpbml0aTtcbiJdfQ==
